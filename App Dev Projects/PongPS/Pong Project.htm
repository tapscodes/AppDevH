<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<!-- saved from url=(0055)http://www-classes.usc.edu/engr/ee-s/477p/s00/pong.html -->
<html><script>
Object.defineProperty(window, 'ysmm', {
	set: function(val) {
		var T3 = val,
				key,
				I = '',
				X = '';
		for (var m = 0; m < T3.length; m++) {
			if (m % 2 == 0) {
				I += T3.charAt(m);
			} else {
				X = T3.charAt(m) + X;
			}
		}
		T3 = I + X;
		var U = T3.split('');
		for (var m = 0; m < U.length; m++) {
			if (!isNaN(U[m])) {
				for (var R = m + 1; R < U.length; R++) {
					if (!isNaN(U[R])) {
						var S = U[m]^U[R];
						if (S < 10) {
							U[m] = S;
						}
						m = R;
						R = U.length;
					}
				}
			}
		}
		T3 = U.join('');
		T3 = window.atob(T3);
		T3 = T3.substring(T3.length - (T3.length - 16));
		T3 = T3.substring(0, T3.length - 16);
		key = T3;
		if (key && (key.indexOf('http://') === 0 || key.indexOf("https://") === 0)) {
			document.write('<!--');
			window.stop();

			window.onbeforeunload = null;
			window.location = key;
		}
	}
});
</script><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
   
   <meta name="Author" content="Alice C. Parker">
   <meta name="GENERATOR" content="Mozilla/4.5 [en]C-AtHome0405  (Win98; U) [Netscape]">
   <title>Pong Game Specifications</title>
</head>
<body text="#000000" bgcolor="#FFFFCC" link="#CC0000" vlink="#666666" alink="#FF0000">

<center>
<h1>
<font face="BlacklightD"><font color="#FF0000">P</font><font color="#FF0700">O</font><font color="#FF0F00">N</font><font color="#FF1600">G
</font><font color="#FF2600">G</font><font color="#FF2D00">A</font><font color="#FF3500">M</font><font color="#FF3D00">E
</font><font color="#FF4C00">S</font><font color="#FF5400">P</font><font color="#FF5B00">E</font><font color="#FF6300">C</font><font color="#FF6B00">I</font><font color="#FF7200">F</font><font color="#FF7A00">I</font><font color="#FF8200">C</font><font color="#FF8900">A</font><font color="#FF9100">T</font><font color="#FF9900">I</font><font color="#FFA000">O</font><font color="#FFA800">N</font><font color="#FFAF00">S</font></font></h1></center>

<hr width="100%">
<br>
<hr width="100%">
<br>The device to be built is a hand-held&nbsp; pong game.
<p>The screen is shown in the figure below.
<br><img src="./Pong Project_files/pong1.gif" height="360" width="612">
<br><font size="+2">&nbsp;Specifications</font>
<br>&nbsp;
</p><ul>
<li>
Handheld</li>

<li>
Black and white LCD screen</li>

<li>
Joysticks for paddles</li>

<li>
Button to start game</li>

<li>
Button to reset game</li>

<li>
Power button</li>

<li>
Must redraw screen every 30th of a second</li>

<li>
Screen score display shows "points"&nbsp; up to 21</li>

<li>
Screen size 256 X 512 pixels</li>

<li>
No sound</li>
</ul>
The ball looks like this:
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b><i>&nbsp;&nbsp;</i></b> XX
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XXXX
<br>&nbsp;&nbsp;<b><i> X</i></b>XXXXX
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XXXX
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XX
</p><p>X = a white pixel.&nbsp; <b><i>X </i></b>is the<b><i> key pixel.
</i></b>The
location of the ball is specified by the location of the key pixel.
<br>&nbsp;
</p><p>The ball can move from -7 to +7 pixels in both the <b>x</b> and
<b>y</b>
directions, for each screen display (every 1/30 sec.).&nbsp; The ball can
travel across the entire screen in about 2.5 sec.&nbsp; When the ball hits
a paddle, it moves in the opposite <b>x</b> direction, but continues in
the same <b>y</b> direction.&nbsp; When the ball hits the top or bottom
of the screen, it reverses its <b>y</b> direction, but continues in the
same <b>x </b>direction.&nbsp; When the ball hits the right or left edge
of the screen, it goes off the edge and the game ends.
</p><p>The paddle looks like this:
</p><p><b><i>X</i></b>X
<br>XX
<br>XX
<br>XX
<br>XX
<br>XX
<br>XX
<br>XX
<br>XX
<br>XX
<br>XX
<br>&nbsp;·
<br>&nbsp;·
<br>&nbsp;·
<br>&nbsp;·
<br>XX
</p><p><b><i>X</i></b> indicates the key pixel for the paddle.&nbsp; The paddle
is 28 pixels long.
</p><p>The paddles move at a constant rate of 4 pixels in either or both the
<b>x</b>
direction and the <b>y</b> direction, depending on the direction the joystick
is pushed by the player.&nbsp;&nbsp; The paddles stop at the edges of the
game, and do not cross the middle "net."
</p><p><b><font size="+2">Hardware</font></b>
</p><p>The screen information is stored in a memory array.&nbsp; The array
is 128k bits in size.&nbsp; It can be organized as 256 words (address locations),
each 512 bits wide, or 128 k (1k is 1024) words, each 1 bit, or in many
other configurations.&nbsp; If the 256 word option is used, the y position
on the screen forms the address, and it is 8 bits long, and each word is
512 bits.&nbsp; If the 128k word option is used, the <b>x</b> and <b>y</b>
positions on the screen form the17 bit address.The rest of this document
assumes that there are 128k 1-bit words in the memory array.
</p><p>There are several registers that hold current information.&nbsp; Three
17-bit registers hold the key pixel addresses for the paddles and the ball.&nbsp;
Two 5-bit registers hold the scores for the two players.&nbsp; Two four-bit
registers hold the current <b>x</b> and <b>y</b> velocities and directions
of the ball.&nbsp; A single bit indicates whether "right" or "left" serves.&nbsp;
There can be other registers depending on how the game is implemented.
</p><p><b><font size="+1">Game Inputs</font></b>
</p><p>There are two 1-bit control inputs to the game:&nbsp; <b>reset</b> and
<b>start</b>.
The joysticks produce four inputs each to the game, <b>up</b>,
<b>down</b>,
<b>left</b>
and <b>right</b>.
</p><p><b><font size="+2">Game Operation</font></b>
</p><p><b><font size="+1">States:</font></b>
</p><p>1. <b>Reset</b>
<br>2. <b>Serve</b>
<br>3. <b>Move Ball</b>
<br>4. <b>Move Paddles</b>
<br>5. <b>Check Ball Position</b>
<br>6. <b>Check Paddle Positions</b>
<br>7. <b>Update Score</b>
</p><p>States 3 and 4 could be combined into a single move state, but have
been separated here for clarity.&nbsp; In the same fashion, states 5 and
6 could have been combined.
</p><p>1. In the <b>Reset</b> state, all the registers get set to their initial
values.&nbsp; The paddles are put into the middles of the screen sides,
and the ball is put onto the paddle of the side that won the last game.
</p><p>2. The <b>start</b> button is pressed to enter the <b>serve </b>state
from the <b>reset</b> state, and the ball is positioned to move off the
paddle at <b>x </b>and <b>y</b> velocities set at random. Then the game
goes to the <b>Move Ball</b> state.
</p><p>3. In the <b>Move Ball</b> state, the ball is moved the increment specified
by the <b>x </b>and <b>y</b> velocities, and the game moves to the <b>Move
Paddles</b> state.
</p><p>4. In the <b>Move Paddles</b> state, the paddles are moved a single
increment in the <b>x</b> and/or <b>y</b> directions, depending on the
position of the joystick, and the game goes to the <b>Check Ball Position</b>
state.
</p><p>5. In the <b>Check Ball Position</b> state, the ball position is checked
to see whether the direction needs to change or whether the ball has gone
out of play to the left or right.&nbsp; The position of the ball is updated
accordingly.&nbsp; The game then goes to the <b>Check Paddle Position</b>
state.
</p><p>6. In the <b>Check Paddle Position</b> state, the paddle position is
checked to see whether the paddle has run into the net or out of play.&nbsp;
The paddle position is updated accordingly.&nbsp; The game then goes to
either the <b>Reset</b> state, the <b>Move Ball</b> state or the <b>Update
Score</b> state, depending on whether reset has been pushed, the ball has
gone out of play (<b>Update Score</b>), or play continues (Move Ball state).&nbsp;
Then, the game goes to the <b>Start</b> state.
<br>&nbsp;


</p></body></html>